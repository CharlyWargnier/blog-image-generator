import streamlit as st
import re
from .lib.generate_images import generate_gradient

def render():
    col1, col2, col3, col4 = st.columns(4)
    emojis = []

    # TODO: Render columns conditionally
    # TODO: Allow user to input less than 4 emojis, and update the rendered image accordingly
    with col1:
        emoji1 = st.text_input('Emoji 1', value='üëª')
        if emoji1 != '': emojis.append(emoji1)

        showCategory = st.checkbox('Show category text and icon?')
    with col2:
        emoji2 = st.text_input('Emoji 2', value='ü§ñ')
        if emoji2 != '': emojis.append(emoji2)
    with col3:
        emoji3 = st.text_input('Emoji 3', value='üçò')
        if emoji3 != '': emojis.append(emoji3)
    with col4:
        emoji4 = st.text_input('Emoji 4', value='üêç')
        if emoji4 != '': emojis.append(emoji4)

    return [emojis, showCategory]


def generate(emojis, category):
    verify_arguments(emojis)

    generated_images = []
    for i in range(4):
        gradient = generate_gradient()
        categoryContent = ''

        if category:
            categoryContent = '<g transform="translate(32, 74)"><path y="200" fill-rule="evenodd" clip-rule="evenodd" d="M0 42C0 18.804 18.804 0 42 0H251C274.196 0 293 18.804 293 42C293 65.196 274.196 84 251 84H42C18.804 84 0 65.196 0 42ZM72 42C72 58.5685 58.5685 72 42 72C25.4315 72 12 58.5685 12 42C12 25.4315 25.4315 12 42 12C58.5685 12 72 25.4315 72 42ZM89.5909 33.0455H85.7216V50.5H88.7557V38.483H88.9176L93.7415 50.4489H96.0085L100.832 38.5085H100.994V50.5H104.028V33.0455H100.159L94.9773 45.6932H94.7727L89.5909 33.0455ZM109.962 49.9119C110.899 50.4744 112.007 50.7557 113.285 50.7557C114.564 50.7557 115.672 50.4744 116.609 49.9119C117.547 49.3494 118.271 48.5625 118.783 47.5511C119.3 46.5398 119.558 45.358 119.558 44.0057C119.558 42.6534 119.3 41.4688 118.783 40.4517C118.271 39.4347 117.547 38.6449 116.609 38.0824C115.672 37.5199 114.564 37.2386 113.285 37.2386C112.007 37.2386 110.899 37.5199 109.962 38.0824C109.024 38.6449 108.297 39.4347 107.78 40.4517C107.268 41.4688 107.013 42.6534 107.013 44.0057C107.013 45.358 107.268 46.5398 107.78 47.5511C108.297 48.5625 109.024 49.3494 109.962 49.9119ZM115.041 47.7131C114.575 48.0938 113.996 48.2841 113.302 48.2841C112.592 48.2841 112.001 48.0938 111.53 47.7131C111.064 47.3267 110.714 46.8097 110.481 46.1619C110.254 45.5142 110.141 44.7926 110.141 43.9972C110.141 43.196 110.254 42.4716 110.481 41.8239C110.714 41.1705 111.064 40.6506 111.53 40.2642C112.001 39.8778 112.592 39.6847 113.302 39.6847C113.996 39.6847 114.575 39.8778 115.041 40.2642C115.507 40.6506 115.854 41.1705 116.081 41.8239C116.314 42.4716 116.43 43.196 116.43 43.9972C116.43 44.7926 116.314 45.5142 116.081 46.1619C115.854 46.8097 115.507 47.3267 115.041 47.7131ZM125.502 50.5V42.8295C125.502 42.1989 125.618 41.6619 125.851 41.2188C126.09 40.7756 126.417 40.4375 126.832 40.2045C127.252 39.9659 127.732 39.8466 128.272 39.8466C129.067 39.8466 129.69 40.0938 130.138 40.5881C130.593 41.0824 130.82 41.767 130.82 42.642V50.5H133.905V42.1648C133.911 41.1193 133.726 40.2301 133.351 39.4972C132.982 38.7642 132.459 38.2045 131.783 37.8182C131.113 37.4318 130.326 37.2386 129.422 37.2386C128.445 37.2386 127.624 37.4545 126.959 37.8864C126.3 38.3182 125.82 38.9006 125.519 39.6335H125.366V37.4091H122.417V50.5H125.502ZM143.819 39.7955V37.4091H141.236V34.2727H138.151V37.4091H136.293V39.7955H138.151V47.0739C138.145 47.892 138.322 48.5739 138.68 49.1193C139.043 49.6648 139.535 50.0682 140.154 50.3295C140.773 50.5852 141.469 50.7017 142.242 50.679C142.68 50.6676 143.049 50.6278 143.35 50.5597C143.657 50.4915 143.893 50.429 144.057 50.3722L143.537 47.9602C143.452 47.983 143.327 48.0085 143.162 48.0369C143.003 48.0653 142.827 48.0795 142.634 48.0795C142.378 48.0795 142.145 48.0398 141.935 47.9602C141.725 47.8807 141.555 47.733 141.424 47.517C141.299 47.2955 141.236 46.9773 141.236 46.5625V39.7955H143.819ZM150.005 50.5V42.8295C150.005 42.1989 150.125 41.6619 150.363 41.2188C150.608 40.7756 150.943 40.4375 151.369 40.2045C151.801 39.9659 152.29 39.8466 152.835 39.8466C153.647 39.8466 154.278 40.0938 154.727 40.5881C155.182 41.0767 155.409 41.7614 155.409 42.642V50.5H158.494V42.1648C158.494 41.108 158.307 40.2131 157.932 39.4801C157.562 38.7472 157.04 38.1903 156.363 37.8097C155.687 37.429 154.895 37.2386 153.986 37.2386C152.986 37.2386 152.162 37.4545 151.514 37.8864C150.872 38.3125 150.398 38.8949 150.091 39.6335H149.937V33.0455H146.92V50.5H150.005ZM164.964 50.5V33.0455H161.879V50.5H164.964ZM169.127 55.3068C169.485 55.375 169.874 55.4091 170.294 55.4091C171.101 55.4091 171.794 55.2756 172.374 55.0085C172.959 54.7472 173.453 54.3665 173.857 53.8665C174.26 53.3722 174.584 52.7784 174.828 52.0852L180.07 37.4091H176.789L173.763 47.2955H173.627L170.61 37.4091H167.337L172.084 50.7727L171.82 51.4801C171.632 51.9744 171.402 52.3267 171.13 52.5369C170.863 52.7528 170.553 52.8636 170.201 52.8693C169.848 52.875 169.448 52.8125 168.999 52.6818L168.283 55.0852C168.493 55.1705 168.775 55.2443 169.127 55.3068ZM188.638 37.4091V50.5H191.723V42.804C191.723 42.2472 191.851 41.7557 192.107 41.3295C192.362 40.9034 192.712 40.571 193.155 40.3324C193.604 40.0881 194.11 39.9659 194.672 39.9659C194.933 39.9659 195.203 39.9858 195.482 40.0256C195.766 40.0597 195.973 40.0994 196.104 40.1449V37.3068C195.962 37.2784 195.783 37.2585 195.567 37.2472C195.357 37.2301 195.166 37.2216 194.996 37.2216C194.246 37.2216 193.578 37.429 192.993 37.8438C192.414 38.2528 192.005 38.8352 191.766 39.5909H191.63V37.4091H188.638ZM200.249 49.9375C201.204 50.483 202.338 50.7557 203.65 50.7557C204.667 50.7557 205.571 50.6023 206.36 50.2955C207.15 49.983 207.798 49.5455 208.303 48.983C208.815 48.4148 209.161 47.75 209.343 46.9886L206.463 46.6648C206.326 47.0341 206.124 47.3438 205.857 47.5938C205.59 47.8438 205.275 48.0341 204.911 48.1648C204.548 48.2898 204.142 48.3523 203.693 48.3523C203.022 48.3523 202.437 48.2102 201.937 47.9261C201.437 47.6364 201.048 47.2216 200.769 46.6818C200.5 46.1548 200.361 45.5269 200.352 44.7983H209.471V43.8523C209.471 42.7045 209.312 41.7159 208.994 40.8864C208.676 40.0511 208.238 39.3636 207.681 38.8239C207.13 38.2841 206.494 37.8864 205.772 37.6307C205.056 37.3693 204.295 37.2386 203.488 37.2386C202.238 37.2386 201.15 37.5256 200.224 38.0994C199.298 38.6676 198.576 39.4631 198.059 40.4858C197.548 41.5028 197.292 42.6847 197.292 44.0312C197.292 45.4006 197.548 46.5909 198.059 47.6023C198.571 48.608 199.301 49.3864 200.249 49.9375ZM200.358 42.7188C200.388 42.2059 200.519 41.7314 200.752 41.2955C201.019 40.8011 201.392 40.4034 201.869 40.1023C202.346 39.7955 202.9 39.642 203.531 39.642C204.122 39.642 204.639 39.7756 205.082 40.0426C205.531 40.3097 205.88 40.6761 206.13 41.142C206.38 41.6023 206.508 42.1278 206.514 42.7188H200.358ZM211.254 37.4091L214.953 50.5H218.174L220.629 41.6534H220.808L223.262 50.5H226.475L230.183 37.4091H227.029L224.762 46.5625H224.634L222.282 37.4091H219.171L216.819 46.6136H216.7L214.399 37.4091H211.254ZM232.577 37.4091V50.5H235.662V37.4091H232.577ZM232.867 35.0653C233.219 35.3892 233.639 35.5511 234.128 35.5511C234.622 35.5511 235.043 35.3892 235.389 35.0653C235.742 34.7358 235.918 34.3409 235.918 33.8807C235.918 33.4148 235.742 33.0199 235.389 32.696C235.043 32.3665 234.622 32.2017 234.128 32.2017C233.639 32.2017 233.219 32.3665 232.867 32.696C232.514 33.0199 232.338 33.4148 232.338 33.8807C232.338 34.3409 232.514 34.7358 232.867 35.0653ZM239.075 50.5H242.16V42.8295C242.16 42.1989 242.276 41.6619 242.509 41.2188C242.748 40.7756 243.075 40.4375 243.489 40.2045C243.91 39.9659 244.39 39.8466 244.93 39.8466C245.725 39.8466 246.347 40.0938 246.796 40.5881C247.251 41.0824 247.478 41.767 247.478 42.642V50.5H250.563V42.1648C250.569 41.1193 250.384 40.2301 250.009 39.4972C249.64 38.7642 249.117 38.2045 248.441 37.8182C247.771 37.4318 246.984 37.2386 246.08 37.2386C245.103 37.2386 244.282 37.4545 243.617 37.8864C242.958 38.3182 242.478 38.9006 242.177 39.6335H242.023V37.4091H239.075V50.5ZM256.036 49.9375C256.849 50.4659 257.769 50.7301 258.798 50.7301C259.548 50.7301 260.17 50.6051 260.664 50.3551C261.158 50.1051 261.556 49.804 261.857 49.4517C262.158 49.0938 262.388 48.7557 262.548 48.4375H262.735V50.5H265.769V33.0455H262.675V39.5739H262.548C262.388 39.2557 262.164 38.9176 261.874 38.5597C261.584 38.196 261.192 37.8864 260.698 37.6307C260.204 37.3693 259.573 37.2386 258.806 37.2386C257.8 37.2386 256.888 37.4972 256.07 38.0142C255.252 38.5256 254.602 39.2841 254.119 40.2898C253.641 41.2898 253.403 42.517 253.403 43.9716C253.403 45.4091 253.638 46.6307 254.11 47.6364C254.582 48.642 255.224 49.4091 256.036 49.9375ZM261.329 47.6705C260.869 48.0227 260.312 48.1989 259.658 48.1989C258.982 48.1989 258.411 48.017 257.945 47.6534C257.485 47.2841 257.136 46.7812 256.897 46.1449C256.664 45.5028 256.548 44.7727 256.548 43.9545C256.548 43.142 256.664 42.4205 256.897 41.7898C257.13 41.1591 257.477 40.6648 257.937 40.3068C258.397 39.9489 258.971 39.7699 259.658 39.7699C260.323 39.7699 260.883 39.9432 261.337 40.2898C261.798 40.6364 262.144 41.1222 262.377 41.7472C262.616 42.3722 262.735 43.108 262.735 43.9545C262.735 44.8011 262.616 45.5426 262.377 46.179C262.138 46.8153 261.789 47.3125 261.329 47.6705Z" fill="white"/><path d="M51.4362 29.4134V27.2307C51.4362 26.7909 51.2016 26.3846 50.8208 26.1648C50.44 25.9451 49.9708 25.9451 49.59 26.1648C49.2093 26.3846 48.9746 26.7909 48.9746 27.2307V29.2821H35.0255V27.2307C35.0255 26.7909 34.7909 26.3846 34.4101 26.1648C34.0294 25.9451 33.5601 25.9451 33.1794 26.1648C32.7986 26.3846 32.564 26.7909 32.564 27.2307V29.4134C30.7376 29.7019 29.0736 30.6318 27.8709 32.0362C26.6679 33.4406 26.0047 35.2277 26 37.0769V50.2053C26 52.2726 26.8212 54.2552 28.283 55.717C29.7448 57.1788 31.7275 58 33.7947 58H50.2054C52.2727 58 54.2554 57.1788 55.7172 55.717C57.179 54.2552 58.0002 52.2725 58.0002 50.2053V37.0769C57.9955 35.2277 57.3323 33.4406 56.1293 32.0362C54.9265 30.6318 53.2625 29.7019 51.4362 29.4134V29.4134ZM33.7947 31.7436H50.2054C51.4024 31.748 52.5631 32.1552 53.5007 32.8994C54.4383 33.6434 55.0982 34.6813 55.3746 35.8461H28.6255C28.9019 34.6813 29.5618 33.6434 30.4995 32.8994C31.4371 32.1552 32.5978 31.7481 33.7947 31.7436V31.7436ZM50.2047 55.5382H33.7947C32.3815 55.5338 31.0277 54.9706 30.0283 53.9715C29.0291 52.972 28.4659 51.6182 28.4615 50.205V38.3073H55.5383V50.205C55.534 51.6182 54.9708 52.972 53.9716 53.9715C52.9722 54.9706 51.6183 55.5338 50.2051 55.5382H50.2047Z" fill="white"/></g>'

        generated_images.append(f"""
            <svg width="100%" viewBox="0 0 1480 700" fill="none" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                # Gradient Background
                <rect width="100%" height="100%" fill="url(#gradient)"/>

                # Emojis
                <text fill="black" xml:space="preserve" style="white-space: pre;" font-family="Inter" font-size="128" font-weight="600" letter-spacing="0.01em"><tspan x="470" y="396">{emojis[0]}</tspan></text>
                <text fill="black" xml:space="preserve" style="white-space: pre;" font-family="Inter" font-size="128" font-weight="600" letter-spacing="0.01em"><tspan x="620" y="396">{emojis[1]}</tspan></text>
                <text fill="black" xml:space="preserve" style="white-space: pre;" font-family="Inter" font-size="128" font-weight="600" letter-spacing="0.01em"><tspan x="770" y="396">{emojis[2]}</tspan></text>
                <text fill="black" xml:space="preserve" style="white-space: pre;" font-family="Inter" font-size="128" font-weight="600" letter-spacing="0.01em"><tspan x="920" y="396">{emojis[3]}</tspan></text>

                # Category name and icon
                {categoryContent}

                <defs>
                    # Gradient
                    <linearGradient id="gradient" x1="0" y1="0" x2="1" y2="0">{gradient}</linearGradient>
                </defs>
            </svg>
        """.strip())
    
    return generated_images


def verify_arguments(emojis):
    # Check if we have enough emojis
    MIN_EMOJIS = 4

    if len(emojis) < MIN_EMOJIS: 
        st.error("Please add four emojis")
        st.stop()
    
    # Check if emojis are actually emojis
    MATCH_EMOJI = re.compile(
        "["
        u"\U0001F600-\U0001F64F"  # emoticons
        u"\U0001F300-\U0001F5FF"  # symbols & pictographs
        u"\U0001F680-\U0001F6FF"  # transport & map symbols
        u"\U0001F1E0-\U0001F1FF"  # flags (iOS)
        u"\U00002500-\U00002BEF"  # chinese char
        u"\U00002702-\U000027B0"
        u"\U00002702-\U000027B0"
        u"\U000024C2-\U0001F251"
        u"\U0001f926-\U0001f937"
        u"\U00010000-\U0010ffff"
        u"\u2640-\u2642"
        u"\u2600-\u2B55"
        u"\u200d"
        u"\u23cf"
        u"\u23e9"
        u"\u231a"
        u"\ufe0f"  # dingbats
        u"\u3030"
        "]+",
        flags=re.UNICODE,
    )
    
    for i in range(len(emojis)):
        for x in range(len(emojis[i])):
            extracted_emoji = MATCH_EMOJI.match(emojis[i][x])

            if extracted_emoji == None:
                st.error("Hmmm, that doesn't look like a valid emoji. Please try using a different one!")
                st.stop()