import streamlit as st
from .lib.generate_images import generate_gradient, generate_base64_image, resize_image

def render():
    images = []

    avatar = st.file_uploader("User/Company logo", help="Recommended size: 90x90 pixels", key="avatar")
    if avatar != None:
        images.append(avatar)

    image2 = st.file_uploader("Choose front image", help="Recommended size: 710x460 pixels", key="image2")
    if image2 != None:
        images.append(image2)

    image1 = st.file_uploader("Choose bottom image", help="Recommended size: 710x460 pixels", key="image1")
    if image1 != None:
        images.append(image1)

    showCategory = st.checkbox('Show category text and icon?')
    
    return [images, showCategory]

def generate(images, category):
    verify_arguments(images)

    # Get image byte data, resize and generate the base64 encoded version
    buffered_avatar = resize_image(images[0], 90, 90)
    buffered_image1 = resize_image(images[1], 710, 460)
    buffered_image2 = resize_image(images[2], 710, 460)
    avatar = generate_base64_image(buffered_avatar.getvalue())
    image1 = generate_base64_image(buffered_image1.getvalue())
    image2 = generate_base64_image(buffered_image2.getvalue())
    categoryContent = ''

    generated_images = []
    for i in range(4):
        gradient = generate_gradient()

        if category:
            categoryContent = '<path fill-rule="evenodd" clip-rule="evenodd" d="M90 48C66.804 48 48 66.804 48 90C48 113.196 66.804 132 90 132H266C289.196 132 308 113.196 308 90C308 66.804 289.196 48 266 48H90ZM145.474 86.9347H148.662C148.531 85.9631 148.253 85.0994 147.827 84.3438C147.406 83.5824 146.869 82.9403 146.216 82.4176C145.562 81.8892 144.818 81.4886 143.983 81.2159C143.148 80.9432 142.244 80.8068 141.273 80.8068C139.75 80.8068 138.386 81.1619 137.182 81.8722C135.977 82.5824 135.026 83.608 134.327 84.9489C133.628 86.2841 133.278 87.892 133.278 89.7727C133.278 91.6477 133.625 93.2557 134.318 94.5966C135.011 95.9375 135.96 96.9631 137.165 97.6733C138.369 98.3835 139.739 98.7386 141.273 98.7386C142.312 98.7386 143.259 98.5852 144.111 98.2784C144.963 97.9659 145.707 97.5341 146.344 96.983C146.98 96.4261 147.494 95.7841 147.886 95.0568C148.284 94.3295 148.543 93.5511 148.662 92.7216L145.474 92.7045C145.378 93.2159 145.202 93.6705 144.946 94.0682C144.696 94.4659 144.386 94.8011 144.017 95.0739C143.653 95.3466 143.241 95.554 142.781 95.696C142.327 95.8324 141.838 95.9006 141.315 95.9006C140.372 95.9006 139.534 95.6705 138.801 95.2102C138.074 94.7443 137.5 94.0568 137.08 93.1477C136.665 92.233 136.457 91.108 136.457 89.7727C136.457 88.4602 136.665 87.3494 137.08 86.4403C137.494 85.5256 138.068 84.8324 138.801 84.3608C139.534 83.8835 140.375 83.6449 141.324 83.6449C141.858 83.6449 142.355 83.7188 142.815 83.8665C143.281 84.0085 143.696 84.2216 144.06 84.5057C144.423 84.7898 144.727 85.1364 144.972 85.5455C145.216 85.9489 145.384 86.4119 145.474 86.9347ZM153.187 98.321C153.852 98.6165 154.599 98.7642 155.428 98.7642C156.11 98.7642 156.704 98.6705 157.209 98.483C157.721 98.2898 158.144 98.0369 158.479 97.7244C158.82 97.4062 159.084 97.0653 159.272 96.7017H159.374V98.5H162.34V89.7386C162.34 88.8693 162.181 88.1449 161.863 87.5653C161.55 86.9858 161.136 86.5284 160.619 86.1932C160.102 85.8523 159.53 85.608 158.905 85.4602C158.28 85.3125 157.653 85.2386 157.022 85.2386C156.107 85.2386 155.272 85.375 154.516 85.6477C153.761 85.9148 153.121 86.3182 152.599 86.858C152.076 87.392 151.701 88.0568 151.474 88.8523L154.354 89.2614C154.508 88.8125 154.803 88.4233 155.241 88.0938C155.684 87.7642 156.283 87.5994 157.039 87.5994C157.755 87.5994 158.303 87.7756 158.684 88.1278C159.065 88.4801 159.255 88.9773 159.255 89.6193V89.6705C159.255 89.9659 159.144 90.1847 158.923 90.3267C158.707 90.4631 158.36 90.5653 157.883 90.6335C157.405 90.696 156.783 90.767 156.016 90.8466C155.38 90.9148 154.763 91.0256 154.167 91.179C153.576 91.3267 153.045 91.5455 152.573 91.8352C152.102 92.125 151.729 92.5114 151.457 92.9943C151.184 93.4773 151.048 94.0881 151.048 94.8267C151.048 95.6847 151.238 96.4062 151.619 96.9915C152.005 97.5767 152.528 98.0199 153.187 98.321ZM157.84 96.1307C157.386 96.375 156.849 96.4972 156.229 96.4972C155.587 96.4972 155.059 96.3523 154.644 96.0625C154.229 95.7727 154.022 95.3438 154.022 94.7756C154.022 94.3778 154.127 94.054 154.337 93.804C154.548 93.5483 154.834 93.3494 155.198 93.2074C155.562 93.0653 155.974 92.9631 156.434 92.9006C156.638 92.8722 156.88 92.8381 157.158 92.7983C157.437 92.7585 157.718 92.7131 158.002 92.6619C158.286 92.6108 158.542 92.5511 158.769 92.483C159.002 92.4148 159.167 92.3409 159.263 92.2614V93.804C159.263 94.2869 159.138 94.733 158.888 95.142C158.644 95.5511 158.295 95.8807 157.84 96.1307ZM173.217 89.1761L176.029 88.8693C175.819 87.7557 175.27 86.8722 174.384 86.2188C173.503 85.5653 172.296 85.2386 170.762 85.2386C169.717 85.2386 168.793 85.4034 167.992 85.733C167.197 86.0568 166.574 86.517 166.126 87.1136C165.682 87.7045 165.464 88.4034 165.469 89.2102C165.464 90.1648 165.762 90.9545 166.364 91.5795C166.967 92.1989 167.895 92.6392 169.151 92.9006L171.384 93.3693C171.986 93.5 172.43 93.6875 172.714 93.9318C173.003 94.1761 173.148 94.4858 173.148 94.8608C173.148 95.304 172.924 95.6761 172.475 95.9773C172.032 96.2784 171.444 96.429 170.711 96.429C170.001 96.429 169.424 96.2784 168.981 95.9773C168.538 95.6761 168.248 95.2301 168.111 94.6392L165.103 94.929C165.29 96.1335 165.873 97.0739 166.85 97.75C167.827 98.4205 169.117 98.7557 170.719 98.7557C171.81 98.7557 172.776 98.5795 173.617 98.2273C174.458 97.875 175.114 97.3864 175.586 96.7614C176.063 96.1307 176.305 95.4034 176.31 94.5795C176.305 93.642 175.998 92.8835 175.39 92.304C174.788 91.7244 173.867 91.3011 172.628 91.0341L170.395 90.5568C169.731 90.4034 169.253 90.2074 168.964 89.9688C168.68 89.7301 168.54 89.4205 168.546 89.0398C168.54 88.5966 168.753 88.2358 169.185 87.9574C169.623 87.679 170.163 87.5398 170.805 87.5398C171.282 87.5398 171.685 87.6165 172.015 87.7699C172.344 87.9233 172.606 88.125 172.799 88.375C172.998 88.625 173.137 88.892 173.217 89.1761ZM181.489 97.9375C182.444 98.483 183.577 98.7557 184.89 98.7557C185.907 98.7557 186.81 98.6023 187.6 98.2955C188.39 97.983 189.037 97.5455 189.543 96.983C190.055 96.4148 190.401 95.75 190.583 94.9886L187.702 94.6648C187.566 95.0341 187.364 95.3438 187.097 95.5938C186.83 95.8438 186.515 96.0341 186.151 96.1648C185.787 96.2898 185.381 96.3523 184.932 96.3523C184.262 96.3523 183.677 96.2102 183.177 95.9261C182.677 95.6364 182.287 95.2216 182.009 94.6818C181.74 94.1548 181.601 93.5269 181.592 92.7983H190.711V91.8523C190.711 90.7045 190.552 89.7159 190.233 88.8864C189.915 88.0511 189.478 87.3636 188.921 86.8239C188.37 86.2841 187.733 85.8864 187.012 85.6307C186.296 85.3693 185.535 85.2386 184.728 85.2386C183.478 85.2386 182.39 85.5256 181.464 86.0994C180.537 86.6676 179.816 87.4631 179.299 88.4858C178.787 89.5028 178.532 90.6847 178.532 92.0312C178.532 93.4006 178.787 94.5909 179.299 95.6023C179.81 96.608 180.54 97.3864 181.489 97.9375ZM181.598 90.7188C181.627 90.2059 181.759 89.7314 181.992 89.2955C182.259 88.8011 182.631 88.4034 183.108 88.1023C183.586 87.7955 184.14 87.642 184.77 87.642C185.361 87.642 185.878 87.7756 186.322 88.0426C186.77 88.3097 187.12 88.6761 187.37 89.142C187.62 89.6023 187.748 90.1278 187.753 90.7188H181.598ZM207.288 89.1761L210.101 88.8693C209.89 87.7557 209.342 86.8722 208.456 86.2188C207.575 85.5653 206.368 85.2386 204.834 85.2386C203.788 85.2386 202.865 85.4034 202.064 85.733C201.268 86.0568 200.646 86.517 200.197 87.1136C199.754 87.7045 199.535 88.4034 199.541 89.2102C199.535 90.1648 199.834 90.9545 200.436 91.5795C201.038 92.1989 201.967 92.6392 203.223 92.9006L205.456 93.3693C206.058 93.5 206.501 93.6875 206.785 93.9318C207.075 94.1761 207.22 94.4858 207.22 94.8608C207.22 95.304 206.995 95.6761 206.547 95.9773C206.103 96.2784 205.515 96.429 204.782 96.429C204.072 96.429 203.495 96.2784 203.052 95.9773C202.609 95.6761 202.319 95.2301 202.183 94.6392L199.174 94.929C199.362 96.1335 199.944 97.0739 200.922 97.75C201.899 98.4205 203.189 98.7557 204.791 98.7557C205.882 98.7557 206.848 98.5795 207.689 98.2273C208.53 97.875 209.186 97.3864 209.657 96.7614C210.135 96.1307 210.376 95.4034 210.382 94.5795C210.376 93.642 210.069 92.8835 209.461 92.304C208.859 91.7244 207.939 91.3011 206.7 91.0341L204.467 90.5568C203.802 90.4034 203.325 90.2074 203.035 89.9688C202.751 89.7301 202.612 89.4205 202.618 89.0398C202.612 88.5966 202.825 88.2358 203.257 87.9574C203.694 87.679 204.234 87.5398 204.876 87.5398C205.353 87.5398 205.757 87.6165 206.086 87.7699C206.416 87.9233 206.677 88.125 206.87 88.375C207.069 88.625 207.209 88.892 207.288 89.1761ZM219.703 87.7955V85.4091H217.12V82.2727H214.035V85.4091H212.177V87.7955H214.035V95.0739C214.029 95.892 214.206 96.5739 214.564 97.1193C214.927 97.6648 215.419 98.0682 216.038 98.3295C216.657 98.5852 217.353 98.7017 218.126 98.679C218.564 98.6676 218.933 98.6278 219.234 98.5597C219.541 98.4915 219.777 98.429 219.941 98.3722L219.422 95.9602C219.336 95.983 219.211 96.0085 219.047 96.0369C218.887 96.0653 218.711 96.0795 218.518 96.0795C218.262 96.0795 218.029 96.0398 217.819 95.9602C217.609 95.8807 217.439 95.733 217.308 95.517C217.183 95.2955 217.12 94.9773 217.12 94.5625V87.7955H219.703ZM230.867 85.4091V92.9943C230.867 93.6591 230.728 94.2131 230.449 94.6562C230.176 95.0938 229.827 95.4233 229.401 95.6449C228.975 95.8665 228.534 95.9773 228.08 95.9773C227.341 95.9773 226.745 95.733 226.29 95.2443C225.836 94.7557 225.608 94.0966 225.608 93.267V85.4091H222.523V93.7443C222.523 94.7898 222.708 95.6818 223.077 96.4205C223.446 97.1534 223.958 97.7131 224.611 98.0994C225.27 98.4801 226.029 98.6705 226.887 98.6705C227.87 98.6705 228.696 98.4375 229.367 97.9716C230.043 97.5057 230.529 96.9062 230.824 96.1733H230.961V98.5H233.952V85.4091H230.867ZM239.461 97.9375C240.274 98.4659 241.194 98.7301 242.223 98.7301C242.973 98.7301 243.595 98.6051 244.089 98.3551C244.583 98.1051 244.981 97.804 245.282 97.4517C245.583 97.0938 245.813 96.7557 245.973 96.4375H246.16V98.5H249.194V81.0455H246.1V87.5739H245.973C245.813 87.2557 245.589 86.9176 245.299 86.5597C245.009 86.196 244.617 85.8864 244.123 85.6307C243.629 85.3693 242.998 85.2386 242.231 85.2386C241.225 85.2386 240.313 85.4972 239.495 86.0142C238.677 86.5256 238.027 87.2841 237.544 88.2898C237.066 89.2898 236.828 90.517 236.828 91.9716C236.828 93.4091 237.063 94.6307 237.535 95.6364C238.007 96.642 238.649 97.4091 239.461 97.9375ZM244.754 95.6705C244.294 96.0227 243.737 96.1989 243.083 96.1989C242.407 96.1989 241.836 96.017 241.37 95.6534C240.91 95.2841 240.561 94.7812 240.322 94.1449C240.089 93.5028 239.973 92.7727 239.973 91.9545C239.973 91.142 240.089 90.4205 240.322 89.7898C240.555 89.1591 240.902 88.6648 241.362 88.3068C241.822 87.9489 242.396 87.7699 243.083 87.7699C243.748 87.7699 244.308 87.9432 244.762 88.2898C245.223 88.6364 245.569 89.1222 245.802 89.7472C246.041 90.3722 246.16 91.108 246.16 91.9545C246.16 92.8011 246.041 93.5426 245.802 94.179C245.563 94.8153 245.214 95.3125 244.754 95.6705ZM253.472 103.307C253.83 103.375 254.219 103.409 254.639 103.409C255.446 103.409 256.139 103.276 256.719 103.009C257.304 102.747 257.798 102.366 258.202 101.866C258.605 101.372 258.929 100.778 259.173 100.085L264.415 85.4091H261.134L258.108 95.2955H257.972L254.955 85.4091H251.682L256.429 98.7727L256.165 99.4801C255.977 99.9744 255.747 100.327 255.475 100.537C255.208 100.753 254.898 100.864 254.546 100.869C254.193 100.875 253.793 100.812 253.344 100.682L252.628 103.085C252.838 103.17 253.12 103.244 253.472 103.307Z" fill="white"/><circle cx="90" cy="90" r="30" fill="url(#avatar-image)"/>'

        generated_images.append(f"""
            <svg width="100%" viewBox="0 0 1480 700" fill="none" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                <g clip-path="url(#clip0_306_444)">
                    <rect width="1480" height="700" fill="url(#gradient)"/>
                    <g filter="url(#filter0_d_306_444)">
                        <path d="M493 253C493 246.373 498.373 241 505 241H1233V779H493V253Z" fill="white"/>
                        <rect x="521" y="317" width="712" height="462" fill="url(#image-1)"/>
                        <circle cx="527" cy="279" r="6" fill="#FF6C6C"/>
                        <circle cx="555" cy="279" r="6" fill="#FFE312"/>
                        <circle cx="583" cy="279" r="6" fill="#3DD56D"/>
                    </g>
                    <g filter="url(#filter1_d_306_444)">
                        <path d="M752 162.5H1479.5V699.5H740.5V174C740.5 167.649 745.649 162.5 752 162.5Z" fill="white" stroke="#FAFAFA"/>
                        <path d="M768 246C768 241.582 771.582 238 776 238H1480V700H768V246Z" fill="url(#image-2)"/>
                        <circle cx="774" cy="200" r="6" fill="#FF6C6C"/>
                        <circle cx="802" cy="200" r="6" fill="#FFE312"/>
                        <circle cx="830" cy="200" r="6" fill="#3DD56D"/>
                    </g>
                </g>

                # Category text and icon
                {categoryContent}

                <defs>
                    <pattern id="avatar-image" patternContentUnits="objectBoundingBox" width="1" height="1">
                        <use xlink:href="#image-avatar" transform="scale(0.00125)"/>
                    </pattern>
                    <pattern id="image-1" patternContentUnits="objectBoundingBox" width="1" height="1">
                        <use xlink:href="#screenshot-1" transform="translate(-0.0865269) scale(0.00110353 0.00170068)"/>
                    </pattern>
                    <pattern id="image-2" patternContentUnits="objectBoundingBox" width="1" height="1">
                        <use xlink:href="#screenshot-2" transform="scale(0.000942247 0.0017)" />
                    </pattern>
                    <filter id="filter0_d_306_444" x="453" y="205" width="804" height="602" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
                        <feFlood flood-opacity="0" result="BackgroundImageFix"/>
                        <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
                        <feOffset dx="-8" dy="-4"/>
                        <feGaussianBlur stdDeviation="16"/>
                        <feComposite in2="hardAlpha" operator="out"/>
                        <feColorMatrix type="matrix" values="0 0 0 0 0.960784 0 0 0 0 0.921569 0 0 0 0 1 0 0 0 0.16 0"/>
                        <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_306_444"/>
                        <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_306_444" result="shape"/>
                    </filter>
                    <filter id="filter1_d_306_444" x="700" y="126" width="804" height="602" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
                        <feFlood flood-opacity="0" result="BackgroundImageFix"/>
                        <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
                        <feOffset dx="-8" dy="-4"/>
                        <feGaussianBlur stdDeviation="16"/>
                        <feComposite in2="hardAlpha" operator="out"/>
                        <feColorMatrix type="matrix" values="0 0 0 0 0.960784 0 0 0 0 0.921569 0 0 0 0 1 0 0 0 0.16 0"/>
                        <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_306_444"/>
                        <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_306_444" result="shape"/>
                    </filter>
                    <clipPath id="clip0_306_444">
                        <rect width="1480" height="700" fill="white"/>
                    </clipPath>
                    # Gradient
                    <linearGradient id="gradient" x1="0" y1="0" x2="1" y2="0">{gradient}</linearGradient>
                    # Images
                    <image id="image-avatar" width="800" height="800" xlink:href="data:image/jpeg;charset=utf-8;base64,{avatar}" />
                    <image id="screenshot-1" width="1063" height="588" xlink:href="data:image/jpeg;charset=utf-8;base64,{image1}" />
                    <image id="screenshot-2" width="1063" height="588" xlink:href="data:image/jpeg;charset=utf-8;base64,{image2}" />
                </defs>
            </svg>
        """.strip())

    return generated_images


def verify_arguments(images):
    MIN_IMAGES = 3

    if len(images) < MIN_IMAGES:
        st.error("Please add at least three images")
        st.stop()